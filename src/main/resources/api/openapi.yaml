openapi: 3.0.3
info:
  title: User and External Project Management API
  description: API for managing users and their external projects
  version: 1.0.0

servers:
  - url: /api/v1
    description: Relative path

paths:
  /api/v1/users:
    post:
      tags:
        - Users
      summary: Create a new user
      operationId: createUser
      parameters:
        - name: Request-Id
          in: header
          required: false
          schema:
            type: string
          description: Optional request ID to prevent duplicate requests
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    get:
      summary: Get all users
      tags:
        - Users
      operationId: getAllUsers
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: The ID of the user
    
    get:
      tags:
        - Users
      summary: Get user by ID
      operationId: getUserById
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    delete:
      summary: Delete a user
      tags:
        - Users
      operationId: deleteUser
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      summary: Update user information
      tags:
        - Users
      operationId: updateUser
      parameters:
        - name: Request-Id
          in: header
          required: false
          schema:
            type: string
          description: Optional request ID to prevent duplicate requests
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/{userId}/projects:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: The ID of the user
    
    post:
      summary: Add external project to a user
      tags:
        - Users
      operationId: addProjectToUser
      parameters:
        - name: Request-Id
          in: header
          required: false
          schema:
            type: string
          description: Optional request ID to prevent duplicate requests
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: Project added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    get:
      summary: Get all projects for a user
      operationId: getUserProjects
      tags:
        - Users
      responses:
        '200':
          description: List of projects retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    CreateUserRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
        name:
          type: string
    
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectResponse'
    
    CreateProjectRequest:
      type: object
      required:
        - id
        - name
      properties:
        name:
          type: string
          minLength: 1
        id:
          type: string
    
    ProjectResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        password:
          type: string
          format: password
          minLength: 8

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: The time when the error occurred
        status:
          type: integer
          format: int32
          description: HTTP status code
        error:
          type: string
          description: Error type description
        message:
          type: string
          description: Detailed error message
        path:
          type: string
          description: The path of the request that caused the error
        details:
          type: array
          items:
            type: string
          description: Additional details about the error (usually validation errors)